from aiogram import Router, F
from aiogram.types import Message, Voice
from aiogram.filters import Command
from services.openai_service import OpenAIService
from services.voice_service import VoiceService
from core.exeptions import OpenAIServiceError
import logging
import os

router = Router()
logger = logging.getLogger(__name__)

def get_openai_service():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ OpenAI —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        service = OpenAIService()
        
        if hasattr(service, 'client') and service.client is not None:
            logger.info(" OpenAI —Å–µ—Ä–≤–∏—Å —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return service
        else:
            logger.error(" OpenAI —Å–µ—Ä–≤–∏—Å —Å–æ–∑–¥–∞–Ω, –Ω–æ –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return None
    except Exception as e:
        logger.error(f" –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è OpenAI —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return None

def get_voice_service():
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏"""
    return VoiceService()

@router.message(Command("start"))
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    await message.answer(
        " –ì–æ–ª–æ—Å–æ–≤–æ–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!\n\n"
        "–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ —Ç–µ–∫—Å—Ç, "
        "–∏ —è –æ—Ç–≤–µ—á—É –≥–æ–ª–æ—Å–æ–≤—ã–º —Å–æ–æ–±—â–µ–Ω–∏–µ–º!"
    )

@router.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    await message.answer(
        " –ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É:\n\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —è –ø—Ä–µ–æ–±—Ä–∞–∑—É—é –µ–≥–æ –≤ —Ç–µ–∫—Å—Ç, "
        "–ø–æ–ª—É—á—É –æ—Ç–≤–µ—Ç –æ—Ç AI –∏ –æ–∑–≤—É—á—É –æ—Ç–≤–µ—Ç\n"
        "‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ - —è –æ—Ç–≤–µ—á—É —Ç–µ–∫—Å—Ç–æ–º\n\n"
        "–ë–æ—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç OpenAI –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤."
    )

@router.message(Command("test"))
async def cmd_test(message: Message):
    """–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ OpenAI"""
    try:
        service = get_openai_service()
        if service is None:
            await message.answer(" –°–µ—Ä–≤–∏—Å OpenAI –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
            return
        
        
        models = await service.client.models.list()
        model_count = len(models.data)
        
        await message.answer(f" –°–µ—Ä–≤–∏—Å OpenAI —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–æ—Å—Ç—É–ø–Ω–æ –º–æ–¥–µ–ª–µ–π: {model_count}")
        
    except Exception as e:
        await message.answer(f" –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}")

@router.message(F.voice | F.audio | F.document)
async def handle_voice_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    user_id = message.from_user.id
    
    openai_service = get_openai_service()
    voice_service = get_voice_service()
    
    if openai_service is None:
        await message.reply(" –°–µ—Ä–≤–∏—Å OpenAI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return
    
    voice_path = None
    audio_response_path = None
    
    try:
        processing_msg = await message.reply(" –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        
        if message.voice:
            file_id = message.voice.file_id
        elif message.audio:
            file_id = message.audio.file_id
        else:
            file_id = message.document.file_id
        
        voice_path = await voice_service.download_voice_file(file_id, message.bot)
        
        await processing_msg.edit_text(" –ü—Ä–µ–æ–±—Ä–∞–∑—É—é —Ä–µ—á—å –≤ —Ç–µ–∫—Å—Ç...")
        user_text = await openai_service.transcribe_audio(voice_path)
        
        if not user_text.strip():
            await processing_msg.edit_text("–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –≤ —Å–æ–æ–±—â–µ–Ω–∏–∏")
            return
        
        await processing_msg.edit_text(f" –í–∞—à –≤–æ–ø—Ä–æ—Å: {user_text}\n\n –§–æ—Ä–º–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")
        
        assistant_response, thread_id = await openai_service.get_assistant_response(user_text)
        
        
        if len(assistant_response) > 4096:
            assistant_response = assistant_response[:4096] + "..."
        
        await processing_msg.edit_text(f" –í–∞—à –≤–æ–ø—Ä–æ—Å: {user_text}\n\n –û—Ç–≤–µ—Ç: {assistant_response}\n\n –°–æ–∑–¥–∞—é –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç...")
        
        
        os.makedirs("temp", exist_ok=True)
        audio_response_path = f"temp/response_{user_id}_{message.message_id}.mp3"
        
        try:
            
            await openai_service.text_to_speech(assistant_response, audio_response_path)
            
            
            if os.path.exists(audio_response_path) and os.path.getsize(audio_response_path) > 0:
                with open(audio_response_path, 'rb') as audio_file:
                    await message.reply_voice(
                        voice=audio_file,
                        caption="üéß –ê—É–¥–∏–æ –æ—Ç–≤–µ—Ç:"
                    )
                await processing_msg.delete()
            else:
                
                await processing_msg.edit_text(
                    f" –í–∞—à –≤–æ–ø—Ä–æ—Å: {user_text}\n\n"
                    f" –û—Ç–≤–µ—Ç: {assistant_response}\n\n"
                    f" –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ –≤–µ—Ä—Å–∏—é –æ—Ç–≤–µ—Ç–∞"
                )
                
        except Exception as tts_error:
            logger.error(f"–û—à–∏–±–∫–∞ TTS: {tts_error}")
            
            await processing_msg.edit_text(
                f" –í–∞—à –≤–æ–ø—Ä–æ—Å: {user_text}\n\n"
                f" –û—Ç–≤–µ—Ç: {assistant_response}\n\n"
                f" –ê—É–¥–∏–æ –æ—Ç–≤–µ—Ç –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –≤ –≤–∞—à–µ–º —Ä–µ–≥–∏–æ–Ω–µ"
            )
        
    except OpenAIServiceError as e:
        await message.reply(f" –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {str(e)}")
        logger.error(f"OpenAI Service Error: {str(e)}")
    except Exception as e:
        await message.reply(" –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è")
        logger.error(f"Unexpected error: {str(e)}")
        import traceback
        traceback.print_exc()
    finally:
        
        if voice_path or audio_response_path:
            voice_service.cleanup_files(voice_path, audio_response_path)

@router.message(F.text)
async def handle_text_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    openai_service = get_openai_service()
    
    if openai_service is None:
        await message.reply(" –°–µ—Ä–≤–∏—Å OpenAI –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
        return
    
    try:
        processing_msg = await message.reply(" –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
        assistant_response, thread_id = await openai_service.get_assistant_response(message.text)
        await processing_msg.edit_text(f" –û—Ç–≤–µ—Ç: {assistant_response}")
        
    except OpenAIServiceError as e:
        await message.reply(f" –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞: {str(e)}")
    except Exception as e:
        await message.reply(" –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")
        logger.error(f"Unexpected error: {str(e)}")